MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=3
PSVERSION_COMP=3
[preset00]
fRating=4.000000
fGammaAdj=1.000
fDecay=0.995
fVideoEchoZoom=1.007
fVideoEchoAlpha=0.000
nVideoEchoOrientation=3
nWaveMode=0
bAdditiveWaves=0
bWaveDots=0
bWaveThick=1
bModWaveAlphaByVolume=1
bMaximizeWaveColor=1
bTexWrap=1
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=0
bSolarize=0
bInvert=0
fWaveAlpha=0.900
fWaveScale=2.997
fWaveSmoothing=0.000
fWaveParam=-0.500
fModWaveAlphaStart=1.000
fModWaveAlphaEnd=1.000
fWarpAnimSpeed=0.274
fWarpScale=7.980
fZoomExponent=1.00000
fShader=0.000
zoom=0.99951
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.20929
sx=1.00000
sy=1.00000
wave_r=0.020
wave_g=0.020
wave_b=0.000
wave_x=0.500
wave_y=0.500
ob_size=0.500
ob_r=1.000
ob_g=0.120
ob_b=1.000
ob_a=0.370
ib_size=0.000
ib_r=0.250
ib_g=0.250
ib_b=0.250
ib_a=1.000
nMotionVectorsX=0.000
nMotionVectorsY=0.000
mv_dx=0.000
mv_dy=0.000
mv_l=5.000
mv_r=1.000
mv_g=1.000
mv_b=1.000
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.200
wavecode_0_enabled=0
wavecode_0_samples=512
wavecode_0_sep=60
wavecode_0_bSpectrum=0
wavecode_0_bUseDots=0
wavecode_0_bDrawThick=0
wavecode_0_bAdditive=0
wavecode_0_scaling=0.08000
wavecode_0_smoothing=0.40000
wavecode_0_r=0.000
wavecode_0_g=0.000
wavecode_0_b=0.000
wavecode_0_a=0.970
wavecode_1_enabled=0
wavecode_1_samples=512
wavecode_1_sep=20
wavecode_1_bSpectrum=0
wavecode_1_bUseDots=0
wavecode_1_bDrawThick=0
wavecode_1_bAdditive=0
wavecode_1_scaling=0.07000
wavecode_1_smoothing=0.65000
wavecode_1_r=0.300
wavecode_1_g=0.300
wavecode_1_b=0.300
wavecode_1_a=1.000
wavecode_2_enabled=0
wavecode_2_samples=512
wavecode_2_sep=30
wavecode_2_bSpectrum=0
wavecode_2_bUseDots=0
wavecode_2_bDrawThick=0
wavecode_2_bAdditive=0
wavecode_2_scaling=0.07000
wavecode_2_smoothing=0.50000
wavecode_2_r=0.300
wavecode_2_g=0.300
wavecode_2_b=0.300
wavecode_2_a=1.000
wavecode_3_enabled=0
wavecode_3_samples=512
wavecode_3_sep=60
wavecode_3_bSpectrum=0
wavecode_3_bUseDots=0
wavecode_3_bDrawThick=0
wavecode_3_bAdditive=0
wavecode_3_scaling=1.00000
wavecode_3_smoothing=0.50000
wavecode_3_r=0.000
wavecode_3_g=0.000
wavecode_3_b=0.000
wavecode_3_a=1.000
shapecode_0_enabled=0
shapecode_0_sides=99
shapecode_0_additive=0
shapecode_0_thickOutline=0
shapecode_0_textured=1
shapecode_0_num_inst=1
shapecode_0_x=1.000
shapecode_0_y=0.630
shapecode_0_rad=1.30000
shapecode_0_ang=0.00000
shapecode_0_tex_ang=0.00000
shapecode_0_tex_zoom=0.76300
shapecode_0_r=1.000
shapecode_0_g=1.000
shapecode_0_b=1.000
shapecode_0_a=0.970
shapecode_0_r2=1.000
shapecode_0_g2=1.000
shapecode_0_b2=1.000
shapecode_0_a2=0.000
shapecode_0_border_r=0.000
shapecode_0_border_g=0.000
shapecode_0_border_b=0.000
shapecode_0_border_a=0.000
shapecode_1_enabled=0
shapecode_1_sides=100
shapecode_1_additive=0
shapecode_1_thickOutline=0
shapecode_1_textured=1
shapecode_1_num_inst=1
shapecode_1_x=0.500
shapecode_1_y=0.550
shapecode_1_rad=0.22500
shapecode_1_ang=0.00000
shapecode_1_tex_ang=0.00000
shapecode_1_tex_zoom=1.00000
shapecode_1_r=1.000
shapecode_1_g=1.000
shapecode_1_b=1.000
shapecode_1_a=0.970
shapecode_1_r2=1.000
shapecode_1_g2=1.000
shapecode_1_b2=1.000
shapecode_1_a2=1.000
shapecode_1_border_r=0.000
shapecode_1_border_g=0.000
shapecode_1_border_b=0.000
shapecode_1_border_a=0.000
shapecode_2_enabled=0
shapecode_2_sides=100
shapecode_2_additive=0
shapecode_2_thickOutline=0
shapecode_2_textured=1
shapecode_2_num_inst=1
shapecode_2_x=0.850
shapecode_2_y=0.000
shapecode_2_rad=1.30000
shapecode_2_ang=0.00000
shapecode_2_tex_ang=0.00000
shapecode_2_tex_zoom=2.06800
shapecode_2_r=1.000
shapecode_2_g=1.000
shapecode_2_b=1.000
shapecode_2_a=0.970
shapecode_2_r2=1.000
shapecode_2_g2=1.000
shapecode_2_b2=1.000
shapecode_2_a2=0.970
shapecode_2_border_r=1.000
shapecode_2_border_g=1.000
shapecode_2_border_b=1.000
shapecode_2_border_a=0.000
shapecode_3_enabled=0
shapecode_3_sides=3
shapecode_3_additive=0
shapecode_3_thickOutline=0
shapecode_3_textured=1
shapecode_3_num_inst=1
shapecode_3_x=0.020
shapecode_3_y=0.500
shapecode_3_rad=0.73300
shapecode_3_ang=1.31900
shapecode_3_tex_ang=0.00000
shapecode_3_tex_zoom=100.00000
shapecode_3_r=1.000
shapecode_3_g=1.000
shapecode_3_b=1.000
shapecode_3_a=0.970
shapecode_3_r2=1.000
shapecode_3_g2=1.000
shapecode_3_b2=1.000
shapecode_3_a2=0.970
shapecode_3_border_r=1.000
shapecode_3_border_g=1.000
shapecode_3_border_b=1.000
shapecode_3_border_a=0.000
per_frame_init_1=x1 = 0;
per_frame_init_2=y1= .001;
per_frame_init_3=z1 = 0;
per_frame_1=zoom = 1;
per_frame_2=wave_a = 0;
per_frame_3=
per_frame_4=startx = 0.3;
per_frame_5=starty = 0.3;
per_frame_6=
per_frame_7=a = 0.55;
per_frame_8=b = 0.05;
per_frame_9=d = 0.09;
per_frame_10=
per_frame_11=q1 = aspectx;
per_frame_12=q2 = aspecty;
per_frame_13=q5 = a;
per_frame_14=q6 = b;
per_frame_15=q7 = d;
per_frame_16=
per_frame_17=//lines below belong to the composite shader (flexis kaleidoscope)
per_frame_18=
per_frame_19=//flexi's beat detection (made for breakbeats)
per_frame_20=vol = bass*8 + mid*5 + treb*3;
per_frame_21=m = m*0.97 + vol*0.08;
per_frame_22=monitor = vol;
per_frame_23=beat = above(vol,res)*above(vol,m)*above(vol,16);
per_frame_24=diff = (1-beat)*diff + beat*(vol-res);
per_frame_25=res = beat*(vol + m*0.04) + (1-beat)*(res -  (0.1+diff*0.02)*60/fps);
per_frame_26=res = max(0,res);
per_frame_27=
per_frame_28=w = if(beat, rand(4096)/1024*asin(1),w); // on beat: randomize pos and angle of the kaleidoscope
per_frame_29=xx = if(beat, 0.1 + rand(800)/1000, xx);
per_frame_30=yy = if(beat, 0.1 + rand(800)/1000, yy);
per_frame_31=
per_frame_32=//geiss' custom beat detection code: (fps-independent; quiet songs don't freak out)
per_frame_33=decay_rate = pow(0.995, fps);  // lower # = more hasty to declare a beat
per_frame_34=min_att    = 2.2;               // lower # = quieter songs can declare beats
per_frame_35=decay_to   = 1;               // lower # = more hasty to declare a beat
per_frame_36=beat =           bass/max(min_att,bass_att);
per_frame_37=beat = max(beat, mid /max(min_att,mid_att ));
per_frame_38=beat = max(beat, treb/max(min_att,treb_att));
per_frame_39=beat = max( beat, (prev_beat-decay_to)*decay_rate + decay_to );
per_frame_40=beat_level     = (beat - prev_beat - 0.07)*24;
per_frame_41=is_beat = above(beat_level, 0.5);
per_frame_42=prev_beat = beat;
per_frame_43=
per_frame_44=w  = if(is_beat, w + (rand(256)-128)/1024, w);  // on beat: random increment of pos and angle
per_frame_45=xx = if(is_beat, xx + (rand(256)-128)/4096, xx);
per_frame_46=yy = if(is_beat, yy + (rand(256)-128)/4096, yy);
per_frame_47=
per_frame_48=
per_frame_49=q11 = sin(w); // w - angle of kaleidoscope
per_frame_50=q12 = cos(w);
per_frame_51=q13 = xx;     // center of kaleidoscope window
per_frame_52=q14 = yy;
per_frame_53=q17 = sin(-w);
per_frame_54=q18 = cos(-w);
per_pixel_1=x = 0.5 + (x-0.51)*q1;
per_pixel_2=y = 0.5 - (y-0.5)*q2;
per_pixel_3=dx = (x*(1-x)-q5*x*y/(x+q6));
per_pixel_4=dy = -q7*y*(1-y/x);
per_pixel_5=
per_pixel_6=dx = -dx*0.02/q1;
per_pixel_7=dy = -dy*0.02/q2;
warp_1=`shader_body
warp_2=`{
warp_3=`    float2 d = texsize.zw*4;
warp_4=`    float3 dx = ( 2*GetBlur1(uv+float2(1,0)*d)-2*GetBlur1(uv-float2(1,0)*d) );
warp_5=`    float3 dy = ( 2*GetBlur1(uv+float2(0,1)*d)-2*GetBlur1(uv-float2(0,1)*d) );
warp_6=`float2 dz = float2(dx.x,dy.x)*texsize.zw;
warp_7=`
warp_8=`ret.x = tex2d(sampler_fw_main,uv - dz).x - (2*GetBlur3(uv).x-2*GetBlur1(uv+dz).x)*0.5 ;
warp_9=`
warp_10=`dz = -float2(dx.y,dy.y)*texsize.zw;
warp_11=`ret.y = tex2d(sampler_fw_main,uv - dz).y - 0.06 - (2*GetBlur2(uv).y-2*GetBlur1(uv+dz).y)*0.65 ;
warp_12=`
warp_13=`float zoom = 1.8-(bass_att-treb_att)*0.015;
warp_14=`float2 cntr = float2(0,0);
warp_15=`float2 c = float2(0.28,0.4);
warp_16=`
warp_17=`d = texsize.zw*4;
warp_18=`dx = ( 2*GetBlur1(uv+float2(1,0)*d)-2*GetBlur1(uv-float2(1,0)*d) );
warp_19=`dy = ( 2*GetBlur1(uv+float2(0,1)*d)-2*GetBlur1(uv-float2(0,1)*d) );
warp_20=`dz = float2(dx.z,dy.z)*texsize.zw*1.5;
warp_21=`
warp_22=` float2 my_uv2 = (uv_orig-0.5-cntr)*zoom; // using uv_orig here - no contortion to the nice julia island
warp_23=` my_uv2 = float2(my_uv2.x*my_uv2.x - my_uv2.y*my_uv2.y, 2*my_uv2.x*my_uv2.y) + c; // u -> u^2 + c
warp_24=`uv = my_uv2;
warp_25=`
warp_26=`ret.z = GetPixel(saturate(my_uv2+dz)).z - 0.014;
warp_27=`
warp_28=`}
comp_1=`#define sat saturate
comp_2=`static const float2 pix = texsize.zw;
comp_3=`float glow, tmp, lamp, dist, bdist, b2dist, dist_c;
comp_4=`float2 dz, uv1, uv3;
comp_5=`static const float3 CamPos = float3(q4,q5,q6);
comp_6=`static const float myzoom = q7;
comp_7=`static const float3x3 RotMat = float3x3(q20,q21,q22,q23,q24,q25,q26,q27,q28);
comp_8=`static const float3 col_struc =  float3(1,.7,.3) + .2*(rand_preset.xyz-.5);
comp_9=`static float2 center = float2 (q1,q2);
comp_10=`
comp_11=`float3 GetBlurX (float2 uvi, float x) {return lerp (GetPixel(uvi), GetBlur1(uvi), x);}
comp_12=`float GetDist(float2 uvi)   {return 1-GetPixel(uvi).b;}
comp_13=`float GetDistB(float2 uvi)  {return 1-GetBlur1(uvi).b;}
comp_14=`float GetDistB2(float2 uvi) {return 1-GetBlur2(uvi).b;}
comp_15=`
comp_16=`float MinDistB (float2 uvi) {float tmp; float4 nb; //##nicht ideal
comp_17=`  tmp = GetDist(uvi);
comp_18=`  tmp = min(tmp,GetDistB2(uvi)*1) ;
comp_19=`  return tmp;}
comp_20=`
comp_21=`sampler sampler_pw_noise_lq;
comp_22=`
comp_23=`float3 neu, ret1;
comp_24=`float2 rs2,rs0,rss,uv2;
comp_25=`float ang2,c,s;
comp_26=`float2x2 rota = float2x2(.7,.7,-.7,.7);
comp_27=`shader_body
comp_28=`{
comp_29=`// Flexis Kaleidoscope
comp_30=`
comp_31=`float2 cntr = float2(q13,q14);
comp_32=`float si = q11;
comp_33=`float co = q12;
comp_34=`
comp_35=`float2 uv_r = (uv-cntr)*aspect.xy;
comp_36=`       uv_r = 4*float2( co*uv_r.x - si*uv_r.y, si*uv_r.x + co*uv_r.y); // rotation
comp_37=`       uv_r = cntr + uv_r*aspect.zw;
comp_38=`       uv_r = 1.0 - abs( frac( uv_r * 0.5 ) * 2.0 - 1.0 ); // Eo.S' mirror code
comp_39=`
comp_40=` si = q17;
comp_41=` co = q18;
comp_42=`
comp_43=`float2 uv_rr = (uv_r-cntr)*aspect.xy;
comp_44=`       uv_rr = 4*float2( co*uv_rr.x - si*uv_rr.y, si*uv_rr.x + co*uv_rr.y); // counter-rotation
comp_45=`       uv_rr = cntr + (uv_rr-cntr)*aspect.zw*0.06;
comp_46=`       uv_rr = 1.0 - abs( frac( uv_rr * 0.5 ) * 2.0 - 1.0 ); // Eo.S' mirror code
comp_47=`
comp_48=`uv = uv_rr;
comp_49=`float2 uvo = 0.5 + (uv-0.5)*float2(1.1,0.81);
comp_50=`float2 factorA = uv-float2(1-0.5,0.5);
comp_51=`
comp_52=`uv -= 0.5;
comp_53=`uv *= aspect.xy;    
comp_54=`
comp_55=`rs0.x = atan2(uv.y, uv.x)/3.1416*2;
comp_56=`rs0.y = .02/(length (uv));
comp_57=`rss = float2 (rs0.x,rs0.y+time);
comp_58=`rss = mul(rss,float2x2(.7,.7,-.7,.7));
comp_59=`float noise = (tex2D(sampler_pw_noise_lq,rss/32)-.7 >= 0);
comp_60=`rss = abs(frac(rss*8)-.5);
comp_61=`float3 dots = saturate(.04/length(rss)) *noise;
comp_62=`
comp_63=`rss = float2 (rs0.x*2,rs0.y+time/2);
comp_64=`rss = mul(rss,float2x2(.7,.7,-.7,.7));
comp_65=`noise = (tex2D(sampler_pw_noise_lq,rss/32)-.7 >= 0);
comp_66=`rss = abs(frac(rss*8)-.5);
comp_67=`dots += saturate(.04/length(rss)) * noise;
comp_68=`
comp_69=`dots *= saturate(.04/abs(.01/rs0.y-q6*0))+.0;
comp_70=`dots *= dots*2;
comp_71=`
comp_72=`float3 ret1 = 0;
comp_73=`int anz = 2;
comp_74=`int n = 0;
comp_75=`while (n <= anz) {
comp_76=`    ang2 = 6.28*n/anz;
comp_77=`    c = cos(ang2);
comp_78=`    s = sin(ang2);
comp_79=`    uv2.x =  uv.x*c - uv.y*s;
comp_80=`    uv2.y =  uv.x*s + uv.y*c;
comp_81=`
comp_82=`    neu = GetPixel(uv2+.5) + GetBlur1(uv2+.5);
comp_83=`    ret1 = max(ret1,neu);
comp_84=`n++;
comp_85=`}
comp_86=`ret = ret1 + dots*(1+ret1);
comp_87=`
comp_88=`float2 factorB = float2(0,-1024+(treb_att-bass_att)*0);
comp_89=`float2 product = float2( factorA.x*factorB.x - factorA.y*factorB.y, factorA.x*factorB.y + factorA.y*factorB.x);
comp_90=`float2 numerator = float2(1,0);
comp_91=`float2 denominator = product;
comp_92=`float2 fraction = float2( numerator.x*denominator.x + numerator.y*denominator.y,   // the fractions real part
comp_93=`                   numerator.y*denominator.x - numerator.x*denominator.y)/  // the fractions imaginary part
comp_94=`                   (denominator.x*denominator.x + denominator.y*denominator.y);
comp_95=`uv = fraction.yx*float2(-1,1)*100;
comp_96=`uv = lerp(0.5 + (uvo-0.5)*2,uv+0.5,0.5);
comp_97=`uv = 0.5 + (1.0 - abs( frac( uv * 0.5 ) * 2 - 1.0 )-0.5)*0.98; // Eo.S. mirror code with cutted borders
comp_98=`uv = (uv-.5)*.9 + .5;
comp_99=`
comp_100=`uv1 = (uv-center)*aspect.xy;
comp_101=`
comp_102=`dist = MinDistB(uv);
comp_103=`bdist = lerp(dist,GetDistB(uv),.2);
comp_104=`dist_c = clamp(GetDistB2 (center),.1,.4); //center distance
comp_105=`
comp_106=`float3 uv2 = mul(float3((uv-.5)*MinDistB(uv),MinDistB(uv))/myzoom,RotMat)+CamPos;
comp_107=`glow = pow (sat(tex2D (sampler_noise_hq,.02*uv2).r-.6)*2,2);
comp_108=`//uv += .003*glow*(tex2D (sampler_noise_mq,uv*2+float2(0,time/4).xy-.5));
comp_109=`
comp_110=`float focus = sat(abs(GetDistB2(uv)-dist_c)*1+.2);
comp_111=`float struc = GetBlurX(uv,focus).r;
comp_112=`
comp_113=`glow = sat(1-exp(-(GetBlur1(uv).r))-.2);
comp_114=`q18 = 1;
comp_115=`ret = pow(struc,1) * (.2+(1-focus) *lerp(dist,1-dist,q18)) * (1+.5*sin(uv2));
comp_116=`ret = lerp(ret, float3(0,1,glow*3), glow);
comp_117=`
comp_118=`//distant light
comp_119=`//ret += pow(1-GetBlurX(uv,.8).b,3)*(.5+.5*slow_roam_cos) *q19;
comp_120=`
comp_121=`//Lamp
comp_122=`uv3 = uv1; 
comp_123=`lamp = saturate(1-4*length(uv3))*(struc)*saturate(1-2*bdist)*1.8;
comp_124=`ret += (1-lum(ret))*lamp;
comp_125=`ret = 1-exp((-2)*ret);
comp_126=`//ret = GetPixel(uv).r;
comp_127=`
comp_128=`// laser
comp_129=`
comp_130=`ret = ret + dots*(1+ret);
comp_131=`}
comp_132=`
comp_133=`//-------------------------------------------
comp_134=`//Written by martin
comp_135=`
